# 6장 문자열 조작

# 문자열 조작 string manipulation이란 문자열을 변경하거나 분리하는 등의 여러 과정을 말한다
# 원래 문자열은 로우 레벨에서 조작하거나 C처럼 문자형이 따로 없는 언어에서는 조작이 까다로운 편
# 하지만 대부분의 언어에서는 별도의 문자열 자료형과 문자열을 조작하기 위한 다양한 기능들을 기본적으로 제공
# 굳이 제약을 두지 않는 한, 언어에서 제공하는 기본 기능들을 잘 활용하는 편이 가장 좋다
# 문자열 조작은 코딩 테스트에서 매우 빈번하게 출제되는 주제 중 하나
# 특히 실무에서도 다양한 분야에 쓰이는 실용적인 주제
# 문자열 처리와 관련된 알고리즘이 쓰이는 대표적인 분야는 다음과 같다

# - 정보 처리 분야 : 어떤 키워드로 웹 페이지를 탐색할 때 문자열 처리 어플리케이션을 이용하게 된다
# 특히 현대의 거의 모든 정보는 문자열로 구성되어 있으며 문자열 처리는 정보 처리에 핵심적인 역할을 한다

# 통신 시스템 분야 : 문자 메시지나 이메일을 보낼 때 기본적으로 문자열을 어느 한 곳에서 다른 곳으로 보내게 된다
# 이처럼 데이터 전송은 문자열 처리 알고리즘이 탄생한 기원이기도 하며, 데이터 전송에서 문자열 처리는 매우 중요한 역할을 한다

# 프로그래밍 시스템 분야 : 프로그램은 그 자체가 문자열로 구성되어어 있다 컴파일러나 인터프리터 등은 문자열을 해서하고 처리하여
# 기계어로 번역하는 역할을 하며, 여기에는 매우 정교한 문자열 처리 알고리즘 등이 쓰인다

# 문법 : 람다 표현식
# 람다 표현식이란 식별자 없이 실행 가능한 함수를 말한다
# 함수 선언 없이도 하나의 식으로 함수를 단순하게 표현할 수 있다
# 람다 표현식보다는 리스트 컴프리헨션이 훨씬 더 간결하고 가독성이 높으므로 이것을 주로 사용할 것

# 937번 문제의 경우 2개의 키를 lambda 표현식으로 정렬하는 문법을 사용
# s.sort(key = lambda x: (x.split()[1], x.split[0]))

# 만약 s가 ['2 A', '1 B', '4 C', '1 A']라면 sorted()로 정렬한 결과는
s = ['2 A', '1 B', '4 C', '1 A']
# print(sorted(s)) # ['1 A', '1 B', '2 A', '4 C']

# 그러나 우리가 원하는 결과가 각 요소의 번호 순 정렬이 아닌
# 그 뒤의 문자순 정렬을 원하며 문자가 동일한 경우에만 그 앞 번호순으로 정렬되는 형태를 희망한다면?
# 이 때 리스트의 각 요소를 풀어서 별도 처리를 해야하는데
# 이럴 때 람다 표현식을 사용할 수 있다
# 람다는 쉽게 말해 간단한 함수를 쉽게 선언하는 방법!
# 만약 람다를 사용하지 않고 직접 함수를 선언한다면 다음과 같은 형태가 된다

def func(x):
    return x.split()[1], x.split()[0]

# s.sort(key=func)
# print(s)

# 람다를 사용하면?

s.sort(key= lambda x: (x.split()[1], x.split()[0]))
print(s) # ['1 A', '2 A', '1 B', '4 C']

# but, 람다 표현식은 코드가 길어지고 map이나 filter와 함께 섞어서 사용하기 시작하면 가독성이 떨어지므로 주의-